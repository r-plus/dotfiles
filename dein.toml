[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'bling/vim-airline'

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

[[plugins]]
repo = 'Shougo/neomru.vim'

[[plugins]]
repo = 'Shougo/neosnippet.vim'
hook_add = '''
  " neosnippet {{{
  " Plugin key-mappings.
  imap <C-k>     <Plug>(neosnippet_expand_or_jump)
  smap <C-k>     <Plug>(neosnippet_expand_or_jump)
  xmap <C-k>     <Plug>(neosnippet_expand_target)
  
  " SuperTab like snippets behavior.
  imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
  \ "\<Plug>(neosnippet_expand_or_jump)"
  \: pumvisible() ? "\<C-n>" : "\<TAB>"
  smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
  \ "\<Plug>(neosnippet_expand_or_jump)"
  \: "\<TAB>"
  
  " For snippet_complete marker.
  if has('conceal')
    set conceallevel=2 concealcursor=i
  endif
  " }}}
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
hook_add = '''
  let g:indent_guides_enable_on_vim_startup = 1
  let g:indent_guides_color_change_percent = 30
  let g:indent_guides_guide_size = 1
'''

[[plugins]]
repo = 'vim-scripts/YankRing.vim'
hook_add = '''
  let g:yankring_manual_clipboard_check = 0
'''

[[plugins]]
repo = 'ConradIrwin/vim-bracketed-paste'

[[plugins]]
repo = 'r-plus/EnhCommentify.vim'

[[plugins]]
repo = 'osyo-manga/vim-anzu'
hook_add = '''
  nmap n <Plug>(anzu-n-with-echo)
  nmap N <Plug>(anzu-N-with-echo)
  nmap * <Plug>(anzu-star-with-echo)
  nmap # <Plug>(anzu-sharp-with-echo)
'''

[[plugins]]
repo = 'Shougo/unite.vim'
on_cmd = 'Unite'
hook_add = '''
  nnoremap vv :<C-u>VimFilerTab<CR>
  nnoremap fm :<C-u>Unite file_mru -buffer-name=mru -no-quit<CR>
  nnoremap fb :<C-u>Unite bookmark -buffer-name=bookmark<CR>
  nnoremap fg :<C-u>Unite grep -buffer-name=grep<CR>
  nnoremap fc :<C-u>Unite grep:% -buffer-name=grep -no-quit -auto-preview<CR>
  nnoremap fr :<C-u>UniteResume<CR>
'''
hook_post_source = '''
  " unite {{{
  let g:unite_force_overwrite_statusline = 0
  call vimfiler#custom#profile('default', 'context', {
  \   'safe' : 0,
  \   'auto_cd' : 1,
  \   'edit_action' : 'tabopen',
  \ })
  autocmd FileType vimfiler call unite#custom_default_action('directory', 'cd')
  autocmd FileType unite call unite#custom_default_action('file', 'tabopen')
  "let g:unite_enable_start_insert = 1
  if executable('ag')
    " Use ag in unite grep source.
    let g:unite_source_grep_command = 'ag'
    let g:unite_source_grep_default_opts = '--nocolor --nogroup --column'
    let g:unite_source_grep_recursive_opt = ''
  elseif executable('pt')
    " Use pt in unite grep source.
    " https://github.com/monochromegane/the_platinum_searcher
    let g:unite_source_grep_command = 'pt'
    let g:unite_source_grep_default_opts = '--nogroup --nocolor'
    let g:unite_source_grep_recursive_opt = ''
    let g:unite_source_grep_encoding = 'utf-8'
  endif
  autocmd FileType unite call s:unite_my_settings()
  function! s:unite_my_settings()"{{{
    " Overwrite settings.
    nnoremap <silent><buffer><expr> r     unite#do_action('replace')
    nnoremap <silent><buffer><expr> gr     unite#do_action('grep')
  
    nmap <buffer> <ESC>      <Plug>(unite_exit)
    imap <buffer> jj      <Plug>(unite_insert_leave)
    "imap <buffer> <C-w>     <Plug>(unite_delete_backward_path)
  
    imap <buffer><expr> j unite#smart_map('j', '')
    imap <buffer> <TAB>   <Plug>(unite_select_next_line)
    imap <buffer> <C-w>     <Plug>(unite_delete_backward_path)
    imap <buffer> '     <Plug>(unite_quick_match_default_action)
    nmap <buffer> '     <Plug>(unite_quick_match_default_action)
    imap <buffer><expr> x
          \ unite#smart_map('x', "\<Plug>(unite_quick_match_choose_action)")
    nmap <buffer> x     <Plug>(unite_quick_match_choose_action)
    nmap <buffer> <C-z>     <Plug>(unite_toggle_transpose_window)
    imap <buffer> <C-z>     <Plug>(unite_toggle_transpose_window)
    imap <buffer> <C-y>     <Plug>(unite_narrowing_path)
    nmap <buffer> <C-y>     <Plug>(unite_narrowing_path)
    nmap <buffer> <C-j>     <Plug>(unite_toggle_auto_preview)
  endfunction"}}}
  " }}}
'''

[[plugins]]
repo = 'Shougo/vimfiler'
on_cmd = ['VimFilerTab', 'VimFiler', 'VimFilerExplorer']

[[plugins]]
repo = 'thinca/vim-ref'
on_cmd = 'Ref'
hook_add = '''
  nnoremap ,ra :<C-u>Ref alc<Space>
  nnoremap ,ro :<C-u>Ref alc<Space><C-r><C-w><CR>
  nnoremap <silent> <Space>K :<C-u>call ref#jump('normal', 'alc')<CR>
  vnoremap <silent> <Space>K :<C-u>call ref#jump('visual', 'alc')<CR>
'''
hook_post_source = '''
  let g:ref_alc_start_linenumber = 43
  " vim-ref for Windows
  if has('gui_win32')
    if exists(isdirectory('C:Program Files (x86)\Lynx for Win32'))
      let $PATH = $PATH . ';C:\Program Files (x86)\Lynx for Win32'
    else
      let $PATH = $PATH . ';C:\Program Files\Lynx for Win32'
    endif
    let g:ref_alc_encoding = 'cp932'
    let g:ref_alc_start_linenumber = 45
  endif
'''

[[plugins]]
repo = 'h1mesuke/vim-alignta'
on_cmd = ['Aling', 'Alignta']

[[plugins]]
repo = 'thinca/vim-qfreplace'
on_ft = ['unite', 'quickfix']

[[plugins]]
repo = 'thinca/vim-quickrun'
on_map = '<Leader>r'
hook_add = '''
  let g:quickrun_config = {}
  let g:quickrun_config['objcpp'] = {
        \     'command': 'clang',
        \     'exec': ['%c %s -o %s:p:r -framework Foundation', '%s:p:r %a', 'rm -f %s:p:r'],
        \     'tempfile': '{tempname()}.mm',
        \ }
  let g:quickrun_config['markdown'] = {
        \ 'outputter': 'browser',
        \ 'command': 'pandoc',
        \ 'exec': ['%c -s -f markdown -t html -o %s:p:r.html %s', 'open %s:p:r.html', 'sleep 1', 'rm %s:p:r.html'],
        \ 'tempfile': '{tempname()}.md'
        \ }
'''

[[plugins]]
repo = 'osyo-manga/vim-over'
on_cmd = 'OverCommandLine'
hook_add = '''
  nnoremap sub :OverCommandLine<CR>%s/<C-r><C-w>//cg<Left><Left><Left>
'''

[[plugins]]
repo = 'deris/vim-rengbang'
on_cmd = 'RengBang'

[[plugins]]
repo = 'elzr/vim-json'

[[plugins]]
repo = 'mhinz/vim-signify'
hook_add = '''
  let g:signify_vcs_list = ['git']
  nnoremap <Leader>gt :<C-u>SignifyToggle<CR>
'''

[[plugins]]
repo = 'rhysd/migemo-search.vim'
hook_post_source = '''
  if executable('cmigemo')
    cnoremap <expr><CR> migemosearch#replace_search_word()."\<CR>"
  endif
'''

[[plugins]]
repo = 'dalance/vseq.vim'
hook_add = '''
  vmap <C-r> <Plug>(vseq-incr-dec)
'''

